_commander().default.option("-f, --filename [filename]", "filename to use when reading from stdin - this will be used in source-maps, errors etc");

_commander().default.option("--presets [list]", "comma-separated list of preset names", collect);

_commander().default.option("--plugins [list]", "comma-separated list of plugin names", collect);

//指定配置文件，可以是.babelrc，也可以是babel.config.js
_commander().default.option("--config-file [path]", "Path to a .babelrc file to use");

//通过那个变量来取env的值，默认为BABEL_ENV的值, 其次为NODE_ENV的值, 如果都没有，直接用development
"sit": "NODE_ENV=sit babel src --out-file build.js",
"uat": "BABEL_ENV=uat babel src --out-file build.js"
"prod": "babel src --out-file build.js --env-name prod"
—env-name指定env，如—env-name prod，则会找到babel.config.js里面的prod对应的presets和plugins
env对应的配置会与顶层的配置合并
如
{
	presets: [ [‘@babel/env-presets’] ],
	plugins: [],
	env: {
		sit: {
			presets: [],这里就算什么也不写，也会有@babel/env-presets
		}
	}
}
_commander().default.option("--env-name [name]", "The name of the 'env' to use when loading configs and plugins. " + "Defaults to the value of BABEL_ENV, or else NODE_ENV, or else 'development'.");

_commander().default.option("--root-mode [mode]", "The project-root resolution mode. " + "One of 'root' (the default), 'upward', or 'upward-optional'.");

_commander().default.option("--source-type [script|module]", "");

忽略.babelrc配置，但是对babel.config.js没有影响
_commander().default.option("--no-babelrc", "Whether or not to look up .babelrc and .babelignore files");

//忽略文件，支持正则 —ignore src/test.js
_commander().default.option("--ignore [list]", "list of glob paths to **not** compile", collect);

_commander().default.option("--only [list]", "list of glob paths to **only** compile", collect);

_commander().default.option("--no-highlight-code", "enable/disable ANSI syntax highlighting of code frames (on by default)");

_commander().default.option("--no-comments", "write comments to generated output (true by default)");

_commander().default.option("--retain-lines", "retain line numbers - will result in really ugly code");

//压缩，删除多余的空格与换行
_commander().default.option("--compact [true|false|auto]", "do not include superfluous whitespace characters and line terminators", booleanify);
//包含—compact，在compact基础上进一压缩
_commander().default.option("--minified", "save as much bytes when printing [true|false]");

const getUser = () => {
    return { name: 'sky' } 
}
compact结果：var getUser=function getUser(){return{name:'sky'};};	//去掉了空格，换行，添加分号
minified结果： var getUser=function getUser(){return{name:"sky"}};        //少了一个分号，单引号变成了双引号

_commander().default.option("--auxiliary-comment-before [string]", "print a comment before any injected non-user code");

_commander().default.option("--auxiliary-comment-after [string]", "print a comment after any injected non-user code");

//true	生成一个文件，如app.js.map
//inline	在生成的文件底部加source map
//both	既生成文件map， 又在文件底部加source map
_commander().default.option("-s, --source-maps [true|false|inline|both]", "", booleanify);

_commander().default.option("--source-map-target [string]", "set `file` on returned source map");

_commander().default.option("--source-file-name [string]", "set `sources[0]` on returned source map");

_commander().default.option("--source-root [filename]", "the root from which all sources are relative");

_commander().default.option("--module-root [filename]", "optional prefix for the AMD module formatter that will be prepend to the filename on module definitions");

_commander().default.option("-M, --module-ids", "insert an explicit id for modules");

_commander().default.option("--module-id [string]", "specify a custom name for module ids");

babel src --out-file build.js --extensions .jsx,.js
_commander().default.option("-x, --extensions [extensions]", "List of extensions to compile when a directory has been input [.es6,.js,.es,.jsx,.mjs]", collect);

_commander().default.option("--keep-file-extension", "Preserve the file extensions of the input files");

//实时编译
yarn babel --watch src --out-dir build --source-maps false  --no-babelrc
_commander().default.option("-w, --watch", "Recompile files on changes");

_commander().default.option("--skip-initial-build", "Do not compile files before watching");

//将输入文件全部编译到一个文件里面
babel src/**/*.js --out-file build/app.js 
babel src --out-file build.js
所有的js都会输入到build.js里面
—out-dir与--out-file是互斥的，一次只能定义一个
_commander().default.option("-o, --out-file [out]", "Compile all input files into a single file");

//将输入目录中模块编译到输出目录
_commander().default.option("-d, --out-dir [out]", "Compile an input directory of modules into an output directory");


babel src --out-dir build --source-maps false  --no-babelrc --relative
—relative指定—out-dir相对于输入目录或文件，如-out-dir build —relative，编译结果存放在目录文件对应的./build/下
_commander().default.option("--relative", "Compile into an output directory relative to input directory or file. Requires --out-dir [out]");

_commander().default.option("-D, --copy-files", "When compiling a directory copy over non-compilable files");

_commander().default.option("--include-dotfiles", "Include dotfiles when compiling and copying non-compilable files");

_commander().default.option("--verbose", "Log everything");

_commander().default.option("--delete-dir-on-start", "Delete the out directory before compilation");

_commander().default.version(_package.default.version + " (@babel/core " + _core().version + ")");

_commander().default.usage("[options] <files ...>");
